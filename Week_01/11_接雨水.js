/**
 * @title 2D接雨水
 * @desc 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
 * @key 每一列上的面积=Math.min(left_max[i],right_max[i])-height[i]
 * @param {number[]} height
 * @return {number}
 */
var trap = function (height) {
    if (!height.length) return 0;

    const n = height.length
    let volumn = 0, // 容量
        left_max = [],
        right_max = [];

    // 计算左边数组的最大
    left_max[0] = height[0]
    for (let i = 1; i < n; i++) {
        left_max[i] = Math.max(left_max[i - 1], height[i])
    }

    // 计算右边数组的最大
    right_max[n - 1] = height[n - 1]
    for (let i = n - 2; i >= 0; i--) {
        right_max[i] = Math.max(right_max[i + 1], height[i])
    }

    // 计算雨水容量和
    for (let i = 0; i < n; i++) {
        volumn += Math.min(left_max[i], right_max[i]) - height[i]
    }

    return volumn
};


/**
 * @title 3D接雨水
 * @desc 给你一个 m x n 的矩阵，其中的值均为非负整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。
 * @param {number[][]} heightMap
 * @return {number}
 * @key 
 * 
* 把每一个元素称作块。因为那个图片给的好像瓷砖啊。
* 其实做这题一开始都是想的是对于每一个块，去找它四个方向最高的高度中的最小值(二维下则是左右最高的高度取较小的那一个)作为上界，当前块作为下界
  但是这4个方向每次遍历复杂度过高，且不能像二维那样去提前预存每个方向的最大值
* 那可以反过来我不以每个块为处理单元，而是以块的四周作为处理单元
* 那如何保证所有四周的可能性都考虑到呢？
  我们从矩阵的最外围往里面遍历，像一个圈不断缩小的过程
* 为了防止重复遍历用visited记录
* 其次要用小顶堆(以高度为判断基准)来存入所有快的四周(即圈是不断缩小的，小顶堆存的就是这个圈)
* 为什么要用小顶堆？
  这样可以保证高度较小的块先出队
** 为什么要让高度较小的块先出队？(关键点)
  1. 一开始时候就讲了基础做法是：对于每一个块，去找它四个方向最高的高度中的最小值(二维下则是左右最高的高度取较小的那一个)作为上界，当前块作为下界
  2. 而我们现在反过来不是以中心块为处理单元，而是以四周作为处理单元
  3. 我们如果能确保当前出队的元素对于该中心块来说是它周围四个高度中的最小值那么就能确定接雨水的大小
  4. 为什么队头元素的高度比中心块要高它就一定是中心块周围四个高度中的最小值呢？
     因为我们的前提就是小顶堆：高度小的块先出队，所以对于中心块来说，先出队的必然是中心块四周高度最小的那一个
* 步骤：
  1. 构建小顶堆，初始化为矩阵的最外围(边界所有元素)
  2. 不断出队，倘若队头元素的四周(队头元素的四周其实就是上面说的中心块，队头元素是中心块的四周高度中最矮的一个)
     即代表能够接雨水：队头元素减去该中心块即当前中心块能接雨水的值
  3. 但是接完雨水之后中心块还要存进队列中，但这时要存入的中心块是接完雨水后的中心块

 */
var trapRainWater = function (heightMap) {
    
};